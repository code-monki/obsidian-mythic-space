/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => DuplicateTabs
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// src/settings.ts
var import_obsidian = require("obsidian");
var DuplicateTabsSettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h1", { text: "Close Similar Tabs" });
    const linkText = containerEl.createEl("span", {
      text: " \u{1F334}"
    });
    const linkContainer = containerEl.createEl("p", {
      text: "Repository: \u{1F334} "
    });
    linkContainer.createEl("a", {
      text: "1C0D/Obsidian-Close-Similar-Tabs",
      href: "https://github.com/1C0D/Obsidian-Close-Similar-Tabs"
    });
    linkContainer.appendChild(linkText);
    new import_obsidian.Setting(containerEl).setName("Close by window").setDesc(
      "Select whether the plugin will only close similar tabs within the same window, or throughout all open windows."
    ).addDropdown((dropdown) => {
      dropdown.addOptions({
        current: "Current window only",
        all: "All windows"
      }).setValue(this.plugin.settings.byWindow).onChange(async (value) => {
        this.plugin.settings.byWindow = value;
        this.plugin.saveSettings();
      });
    });
  }
};

// src/main.ts
var DEFAULT_SETTINGS = {
  byWindow: "current"
};
var DuplicateTabs = class extends import_obsidian2.Plugin {
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new DuplicateTabsSettingsTab(this.app, this));
    this.app.workspace.onLayoutReady(() => {
      this.registerEvent(
        this.app.workspace.on("active-leaf-change", () => {
          this.findDuplicates();
        })
      );
    });
  }
  async loadSettings() {
    this.settings = Object.assign(
      {},
      DEFAULT_SETTINGS,
      await this.loadData()
    );
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  // activeLeaf is the last leaf created
  // and then removed when a duplicate is found
  findDuplicates() {
    const byWindow = this.settings.byWindow;
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian2.View);
    const isMainWindowActive = (activeView == null ? void 0 : activeView.containerEl.win) == window;
    const rootSplitActive = (activeView == null ? void 0 : activeView.leaf.getRoot()) == this.app.workspace.rootSplit;
    const activeLeaf = this.app.workspace.activeLeaf;
    const activeLeafPath = activeLeaf == null ? void 0 : activeLeaf.getViewState().state.file;
    this.app.workspace.iterateAllLeaves((leaf) => {
      const leafState = leaf.getViewState();
      const leafPath = leafState.state.file;
      const isMainWindowDupli = leaf.view.containerEl.win == window;
      const isSameWindowDupli = leaf.view.containerEl.win == activeWindow;
      const rootSplitDupli = leaf.getRoot() == this.app.workspace.rootSplit;
      const correctPane = isMainWindowDupli && rootSplitDupli || !isMainWindowDupli;
      if ((!isMainWindowActive || rootSplitActive) && leafPath && correctPane) {
        if (byWindow === "all") {
          if (leaf !== activeLeaf && leafPath === activeLeafPath) {
            activeLeaf == null ? void 0 : activeLeaf.detach();
            this.app.workspace.revealLeaf(leaf);
          }
        } else {
          const correctPane1 = isMainWindowDupli && isMainWindowActive || !isMainWindowActive && !isMainWindowDupli && isSameWindowDupli;
          if (correctPane1 && leaf !== activeLeaf && leafPath === activeLeafPath) {
            activeLeaf == null ? void 0 : activeLeaf.detach();
            this.app.workspace.revealLeaf(leaf);
          }
        }
      }
    });
  }
};
//# sourceMappingURL=data:application/json;base64,
